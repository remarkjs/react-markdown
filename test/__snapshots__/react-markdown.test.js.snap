// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`allows specifying a custom URI-transformer 1`] = `
<p>
  Received a great 
  <a
    href="/rexxars/react-markdown/pull/15"
  >
    pull request
  </a>
   today
</p>
`;

exports[`can render the most basic of documents (single paragraph) 1`] = `
<p>
  Test
</p>
`;

exports[`can render the whole spectrum of markdown within a single run (with html parser) 1`] = `
Array [
  <h1>
    h1 Heading
  </h1>,
  <h2>
    h2 Heading
  </h2>,
  <h3>
    h3 Heading
  </h3>,
  <h4>
    h4 Heading
  </h4>,
  <h5>
    h5 Heading
  </h5>,
  <h6>
    h6 Heading
  </h6>,
  <h2>
    Horizontal Rules
  </h2>,
  <hr />,
  <hr />,
  <hr />,
  <h2>
    Emphasis
  </h2>,
  <p>
    <strong>
      This is bold text
    </strong>
  </p>,
  <p>
    <strong>
      This is bold text
    </strong>
  </p>,
  <p>
    <em>
      This is italic text
    </em>
  </p>,
  <p>
    <em>
      This is italic text
    </em>
  </p>,
  <p>
    <del>
      Strikethrough
    </del>
  </p>,
  <h2>
    Blockquotes
  </h2>,
  <blockquote>
    <p>
      Blockquotes can also be nested...
    </p>
    <blockquote>
      <p>
        ...by using additional greater-than signs right next to each other...
      </p>
      <blockquote>
        <p>
          ...or with spaces between arrows.
        </p>
      </blockquote>
    </blockquote>
  </blockquote>,
  <h2>
    Lists
  </h2>,
  <p>
    Unordered
  </p>,
  <ul>
    <li>
      Create a list by starting a line with 
      <code>
        +
      </code>
      , 
      <code>
        -
      </code>
      , or 
      <code>
        *
      </code>
    </li>
    <li>
      Sub-lists are made by indenting 2 spaces:
      <ul>
        <li>
          Marker character change forces new list start:
          <ul>
            <li>
              Ac tristique libero volutpat at
            </li>
          </ul>
          <ul>
            <li>
              Facilisis in pretium nisl aliquet
            </li>
          </ul>
          <ul>
            <li>
              Nulla volutpat aliquam velit
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      Very easy!
    </li>
  </ul>,
  <p>
    Ordered
  </p>,
  <ol>
    <li>
      Lorem ipsum dolor sit amet
    </li>
    <li>
      Consectetur adipiscing elit
    </li>
    <li>
      Integer molestie lorem at massa
    </li>
  </ol>,
  <ol>
    <li>
      You can use sequential numbers...
    </li>
    <li>
      ...or keep all the numbers as 
      <code>
        1.
      </code>
    </li>
  </ol>,
  <p>
    Start numbering with offset:
  </p>,
  <ol
    start="57"
  >
    <li>
      foo
    </li>
    <li>
      bar
    </li>
  </ol>,
  <p>
    Loose lists?
  </p>,
  <ul>
    <li>
      <p>
        foo
      </p>
    </li>
    <li>
      <p>
        bar
      </p>
    </li>
  </ul>,
  <h2>
    Code
  </h2>,
  <p>
    Inline 
    <code>
      code
    </code>
  </p>,
  <p>
    Indented code
  </p>,
  <pre>
    <code>
      // Some comments
line 1 of code
line 2 of code
line 3 of code
    </code>
  </pre>,
  <p>
    Block code "fences"
  </p>,
  <pre>
    <code>
      Sample text here...
    </code>
  </pre>,
  <p>
    Syntax highlighting
  </p>,
  <pre>
    <code
      className="language-js"
    >
      var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
    </code>
  </pre>,
  <h2>
    Tables
  </h2>,
  <table>
    <thead>
      <tr>
        <th>
          Tag
        </th>
        <th>
          Use
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          p
        </td>
        <td>
          Paragraph
        </td>
      </tr>
      <tr>
        <td>
          table
        </td>
        <td>
          Table
        </td>
      </tr>
      <tr>
        <td>
          em
        </td>
        <td>
          Emphasis
        </td>
      </tr>
    </tbody>
  </table>,
  <p>
    Left/right aligned columns
  </p>,
  <table>
    <thead>
      <tr>
        <th
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          Project
        </th>
        <th
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          Stars
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          React
        </td>
        <td
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          80 759
        </td>
      </tr>
      <tr>
        <td
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          Vue.js
        </td>
        <td
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          73 322
        </td>
      </tr>
      <tr>
        <td
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          sse-channel
        </td>
        <td
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          50
        </td>
      </tr>
    </tbody>
  </table>,
  <h2>
    Links
  </h2>,
  <p>
    <a
      href="https://espen.codes/"
    >
      Espen.Codes
    </a>
  </p>,
  <p>
    <a
      href="https://www.sanity.io/"
      title="Sanity, the headless CMS and PaaS"
    >
      Sanity
    </a>
  </p>,
  <p>
    Autoconverted link 
    <a
      href="https://github.com/rexxars/react-markdown"
    >
      https://github.com/rexxars/react-markdown
    </a>
  </p>,
  <p>
    <a
      href="https://reactjs.org"
      title="React, A JavaScript library for building user interfaces"
    >
      Link references
    </a>
  </p>,
  <h2>
    Images
  </h2>,
  <p>
    <img
      alt="React Markdown"
      src="https://espen.codes/assets/projects/react-markdown/320x180.png"
    />
    

    <img
      alt="Mead"
      src="https://espen.codes/assets/projects/mead/320x180.png"
      title="Mead, on-the-fly image transformer"
    />
  </p>,
  <p>
    Like links, Images also have a footnote style syntax
  </p>,
  <p>
    <img
      alt="Alt text"
    />
  </p>,
  <p>
    With a reference later in the document defining the URL location:
  </p>,
  <h2>
    Hard breaks
  </h2>,
  <p>
    Yeah, hard breaks
    <br />
    can be useful too.
  </p>,
  <h2>
    HTML entities
  </h2>,
  <p>
    Some characters, like 
    Ã¦
    , 
    &
     and similar should be handled properly.
  </p>,
  <h2>
    HTML
  </h2>,
  <p>
    Does anyone actually like the fact that you can embed HTML in markdown?
  </p>,
  <iframe
    height="480"
    src="https://foo.bar/"
    width="640"
  />,
  <p>
    We used to have a known bug where inline HTML wasn't handled well. You can do basic tags like

    <code>
      code
    </code>
    , as long as it doesn't contain any 
    <span
      className="attrs"
    >
      attributes
    </span>
    . If you
have weird ordering on your tags, it won't work either. It does support 
    <strong>
      nested

      <em>
        tags
      </em>
      , however
    </strong>
    . And with the 
    <code
      className="name"
    >
      html-parser
    </code>
     plugin, it can now properly handle HTML! Which is pretty sweet.
  </p>,
  <hr />,
  <hr />,
  <p>
    Cool, eh?
  </p>,
]
`;

exports[`can render the whole spectrum of markdown within a single run 1`] = `
Array [
  <h1>
    h1 Heading
  </h1>,
  <h2>
    h2 Heading
  </h2>,
  <h3>
    h3 Heading
  </h3>,
  <h4>
    h4 Heading
  </h4>,
  <h5>
    h5 Heading
  </h5>,
  <h6>
    h6 Heading
  </h6>,
  <h2>
    Horizontal Rules
  </h2>,
  <hr />,
  <hr />,
  <hr />,
  <h2>
    Emphasis
  </h2>,
  <p>
    <strong>
      This is bold text
    </strong>
  </p>,
  <p>
    <strong>
      This is bold text
    </strong>
  </p>,
  <p>
    <em>
      This is italic text
    </em>
  </p>,
  <p>
    <em>
      This is italic text
    </em>
  </p>,
  <p>
    <del>
      Strikethrough
    </del>
  </p>,
  <h2>
    Blockquotes
  </h2>,
  <blockquote>
    <p>
      Blockquotes can also be nested...
    </p>
    <blockquote>
      <p>
        ...by using additional greater-than signs right next to each other...
      </p>
      <blockquote>
        <p>
          ...or with spaces between arrows.
        </p>
      </blockquote>
    </blockquote>
  </blockquote>,
  <h2>
    Lists
  </h2>,
  <p>
    Unordered
  </p>,
  <ul>
    <li>
      Create a list by starting a line with 
      <code>
        +
      </code>
      , 
      <code>
        -
      </code>
      , or 
      <code>
        *
      </code>
    </li>
    <li>
      Sub-lists are made by indenting 2 spaces:
      <ul>
        <li>
          Marker character change forces new list start:
          <ul>
            <li>
              Ac tristique libero volutpat at
            </li>
          </ul>
          <ul>
            <li>
              Facilisis in pretium nisl aliquet
            </li>
          </ul>
          <ul>
            <li>
              Nulla volutpat aliquam velit
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      Very easy!
    </li>
  </ul>,
  <p>
    Ordered
  </p>,
  <ol>
    <li>
      Lorem ipsum dolor sit amet
    </li>
    <li>
      Consectetur adipiscing elit
    </li>
    <li>
      Integer molestie lorem at massa
    </li>
  </ol>,
  <ol>
    <li>
      You can use sequential numbers...
    </li>
    <li>
      ...or keep all the numbers as 
      <code>
        1.
      </code>
    </li>
  </ol>,
  <p>
    Start numbering with offset:
  </p>,
  <ol
    start="57"
  >
    <li>
      foo
    </li>
    <li>
      bar
    </li>
  </ol>,
  <p>
    Loose lists?
  </p>,
  <ul>
    <li>
      <p>
        foo
      </p>
    </li>
    <li>
      <p>
        bar
      </p>
    </li>
  </ul>,
  <h2>
    Code
  </h2>,
  <p>
    Inline 
    <code>
      code
    </code>
  </p>,
  <p>
    Indented code
  </p>,
  <pre>
    <code>
      // Some comments
line 1 of code
line 2 of code
line 3 of code
    </code>
  </pre>,
  <p>
    Block code "fences"
  </p>,
  <pre>
    <code>
      Sample text here...
    </code>
  </pre>,
  <p>
    Syntax highlighting
  </p>,
  <pre>
    <code
      className="language-js"
    >
      var foo = function (bar) {
  return bar++;
};

console.log(foo(5));
    </code>
  </pre>,
  <h2>
    Tables
  </h2>,
  <table>
    <thead>
      <tr>
        <th>
          Tag
        </th>
        <th>
          Use
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          p
        </td>
        <td>
          Paragraph
        </td>
      </tr>
      <tr>
        <td>
          table
        </td>
        <td>
          Table
        </td>
      </tr>
      <tr>
        <td>
          em
        </td>
        <td>
          Emphasis
        </td>
      </tr>
    </tbody>
  </table>,
  <p>
    Left/right aligned columns
  </p>,
  <table>
    <thead>
      <tr>
        <th
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          Project
        </th>
        <th
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          Stars
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          React
        </td>
        <td
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          80 759
        </td>
      </tr>
      <tr>
        <td
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          Vue.js
        </td>
        <td
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          73 322
        </td>
      </tr>
      <tr>
        <td
          style={
            Object {
              "textAlign": "left",
            }
          }
        >
          sse-channel
        </td>
        <td
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          50
        </td>
      </tr>
    </tbody>
  </table>,
  <h2>
    Links
  </h2>,
  <p>
    <a
      href="https://espen.codes/"
    >
      Espen.Codes
    </a>
  </p>,
  <p>
    <a
      href="https://www.sanity.io/"
      title="Sanity, the headless CMS and PaaS"
    >
      Sanity
    </a>
  </p>,
  <p>
    Autoconverted link 
    <a
      href="https://github.com/rexxars/react-markdown"
    >
      https://github.com/rexxars/react-markdown
    </a>
  </p>,
  <p>
    <a
      href="https://reactjs.org"
      title="React, A JavaScript library for building user interfaces"
    >
      Link references
    </a>
  </p>,
  <h2>
    Images
  </h2>,
  <p>
    <img
      alt="React Markdown"
      src="https://espen.codes/assets/projects/react-markdown/320x180.png"
    />
    

    <img
      alt="Mead"
      src="https://espen.codes/assets/projects/mead/320x180.png"
      title="Mead, on-the-fly image transformer"
    />
  </p>,
  <p>
    Like links, Images also have a footnote style syntax
  </p>,
  <p>
    <img
      alt="Alt text"
    />
  </p>,
  <p>
    With a reference later in the document defining the URL location:
  </p>,
  <h2>
    Hard breaks
  </h2>,
  <p>
    Yeah, hard breaks
    <br />
    can be useful too.
  </p>,
  <h2>
    HTML entities
  </h2>,
  <p>
    Some characters, like 
    Ã¦
    , 
    &
     and similar should be handled properly.
  </p>,
  <h2>
    HTML
  </h2>,
  <p>
    Does anyone actually like the fact that you can embed HTML in markdown?
  </p>,
  <div
    dangerouslySetInnerHTML={
      Object {
        "__html": "<iframe
  src=\\"https://foo.bar/\\"
  width=\\"640\\"
  height=\\"480\\"
/>",
      }
    }
  />,
  <p>
    We used to have a known bug where inline HTML wasn't handled well. You can do basic tags like

    <span
      dangerouslySetInnerHTML={
        Object {
          "__html": "<code>",
        }
      }
    />
    code
    <code>
      , as long as it doesn't contain any 
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "<span class=\\"attrs\\">",
          }
        }
      />
      attributes
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "</span>",
          }
        }
      />
      . If you
have weird ordering on your tags, it won't work either. It does support 
      <strong>
        nested

        <em>
          tags
        </em>
        , however
      </strong>
      . And with the 
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "<code class=\\"name\\">",
          }
        }
      />
      html-parser
    </code>
     plugin, it can now properly handle HTML! Which is pretty sweet.
  </p>,
  <span
    dangerouslySetInnerHTML={
      Object {
        "__html": "<hr /><hr />",
      }
    }
  />,
  <p>
    Cool, eh?
  </p>,
]
`;

exports[`can use parser plugins 1`] = `
Array [
  <p>
    Just put
    <br />
    hard breaks
    <br />
    at each newline
  </p>,
  <pre>
    <code>
      but not inside
code snippets
    </code>
  </pre>,
]
`;

exports[`passes along all props when the node type is unknown 1`] = `
Array [
  <p>
    Paragraph
  </p>,
  <div>
    Sanity
  </div>,
]
`;

exports[`sanitizes certain dangerous urls for links by default 1`] = `
Array [
  <h1>
    <a
      href="javascript:void(0)"
    >
      Much fun
    </a>
  </h1>,
  <p>
    Can be had with 
    <a
      href="javascript:void(0)"
    >
      XSS links
    </a>
  </p>,
  <blockquote>
    <p>
      And 
      <a
        href="javascript:void(0)"
      >
        other
      </a>
       nonsense... 
      <a
        href="javascript:void(0)"
      >
        files
      </a>
       for instance
    </p>
  </blockquote>,
  <h2>
    <a
      href="javascript:void(0)"
    >
      Entities
    </a>
     can be tricky, too
  </h2>,
  <p>
    Regular 
    <a
      href="https://foo.bar"
    >
      links
    </a>
     must 
    <a
      href=""
    >
      be
    </a>
     allowed
  </p>,
  <p>
    <a
      href="javascript:void(0)"
      title="Dangerous stuff"
    >
      Some ref
    </a>
  </p>,
  <p>
    Should allow 
    <a
      href="mailto:ex@ample.com"
    >
      mailto
    </a>
     and 
    <a
      href="tel:13133"
    >
      tel
    </a>
     links tho
  </p>,
  <p>
    Also, 
    <a
      href="//google.com"
    >
      protocol-agnostic
    </a>
     should be allowed
  </p>,
  <p>
    local 
    <a
      href="/foo/bar"
    >
      paths
    </a>
     should be 
    <a
      href="foo"
    >
      allowed
    </a>
  </p>,
  <p>
    allow 
    <a
      href="?javascript:foo"
    >
      weird
    </a>
     query strings and 
    <a
      href="foo#vbscript:orders"
    >
      hashes
    </a>
  </p>,
]
`;

exports[`should be able to override remark-parse plugin options 1`] = `
<p>
  <a
    href="https://example.com/so much space"
    title="Title"
  >
    Spaces in URLs
  </a>
</p>
`;

exports[`should be able to override renderers 1`] = `
Array [
  <span
    className="heading level-1"
  >
    Header
  </span>,
  <p>
    Paragraph
  </p>,
  <span
    className="heading level-2"
  >
    New header
  </span>,
  <ol>
    <li>
      List item
    </li>
    <li>
      List item 2
    </li>
  </ol>,
  <p>
    Foo
  </p>,
]
`;

exports[`should be able to override root renderer with fragment renderer 1`] = `
Array [
  <h1>
    Header
  </h1>,
  <p>
    foo
  </p>,
]
`;

exports[`should be able to override text renderer 1`] = `
Array [
  <h1>
    HEADER
  </h1>,
  <p>
    PARAGRAPH
  </p>,
  <h2>
    NEW HEADER
  </h2>,
  <ol>
    <li>
      LIST ITEM
    </li>
    <li>
      LIST ITEM 2
    </li>
  </ol>,
  <p>
    FOO
  </p>,
]
`;

exports[`should be able to render a table with a single child with HTML parser plugin 1`] = `
<table>
  <tbody>
    <tr>
      <td>
        I am having so much fun
      </td>
    </tr>
  </tbody>
</table>
`;

exports[`should be able to render a table with multiple children with HTML parser plugin 1`] = `
<table>
  <thead>
    <tr>
      <th>
        Title
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        I am having so much fun
      </td>
    </tr>
  </tbody>
</table>
`;

exports[`should be able to render basic inline html without containers 1`] = `
<p>
  I am having 
  <strong>
    so
  </strong>
   much fun
</p>
`;

exports[`should be able to render inline code 1`] = `
<p>
  Just call 
  <code>
    renderToStaticMarkup()
  </code>
  , already
</p>
`;

exports[`should be able to render inline html in totally unsatisfying, weird ways 1`] = `
<p>
  I am having 
  <span
    dangerouslySetInnerHTML={
      Object {
        "__html": "<span class=\\"foo\\">",
      }
    }
  />
  so
  <span
    dangerouslySetInnerHTML={
      Object {
        "__html": "</span>",
      }
    }
  />
   much fun
</p>
`;

exports[`should be able to render inline html properly with HTML parser plugin (through require) 1`] = `
<p>
  I am having 
  <span
    className="foo"
  >
    so
  </span>
   much fun
</p>
`;

exports[`should be able to render inline html properly with HTML parser plugin 1`] = `
<p>
  I am having 
  <span
    className="foo"
  >
    so
  </span>
   much fun
</p>
`;

exports[`should be able to render inline html with nested markdown properly with HTML parser plugin 1`] = `
<p>
  I am having 
  <span
    className="foo"
  >
    <em>
      so
    </em>
  </span>
   much fun
</p>
`;

exports[`should be able to render inline html with self-closing tags properly with HTML parser plugin 1`] = `
<p>
  I am having 
  <wbr />
   so much fun
</p>
`;

exports[`should be able to render inline html with self-closing tags with attributes properly with HTML parser plugin 1`] = `
<p>
  I am having 
  <wbr
    className="foo"
  />
   so much fun
</p>
`;

exports[`should be able to render multiple inline html elements with self-closing tags with attributes properly with HTML parser plugin 1`] = `
<p>
  I am having 
  <wbr
    className="foo"
  />
   so much 
  <wbr
    className="bar"
  />
   fun
</p>
`;

exports[`should be able to render replaced non-void html elements with HTML parser plugin 1`] = `
<p>
  I am having 
  <kbd>
    so much
  </kbd>
   fun
</p>
`;

exports[`should call function to get target attribute for links if specified 1`] = `
<p>
  This is 
  <a
    href="https://espen.codes/"
    target="_blank"
  >
    a link
  </a>
   to Espen.Codes.
</p>
`;

exports[`should escape html blocks by default (with HTML parser plugin) 1`] = `
Array [
  <p>
    This is a regular paragraph.
  </p>,
  "<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>",
  <p>
    This is another regular paragraph.
  </p>,
]
`;

exports[`should escape html blocks by default 1`] = `
Array [
  <p>
    This is a regular paragraph.
  </p>,
  "<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>",
  <p>
    This is another regular paragraph.
  </p>,
]
`;

exports[`should escape html blocks if escapeHtml prop is set (with HTML parser plugin) 1`] = `
Array [
  <p>
    This is a regular paragraph.
  </p>,
  "<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>",
  <p>
    This is another regular paragraph.
  </p>,
]
`;

exports[`should handle blockquotes 1`] = `
<blockquote>
  <p>
    Moo
Tools
FTW
  </p>
</blockquote>
`;

exports[`should handle bold/strong text 1`] = `
<p>
  React is 
  <strong>
    totally
  </strong>
   
  <strong>
    awesome
  </strong>
</p>
`;

exports[`should handle code blocks by indentation 1`] = `
"<pre><code>&lt;footer class=&quot;footer&quot;&gt;
    &amp;copy; 2014 Foo Bar
&lt;/footer&gt;</code></pre>"
`;

exports[`should handle code tags with language specification 1`] = `
<pre>
  <code
    className="language-js"
  >
    var foo = require('bar');
foo();
  </code>
</pre>
`;

exports[`should handle code tags without any language specification 1`] = `
<pre>
  <code>
    var foo = require('bar');
foo();
  </code>
</pre>
`;

exports[`should handle emphasis 1`] = `
<p>
  React is 
  <em>
    totally
  </em>
   
  <em>
    awesome
  </em>
</p>
`;

exports[`should handle horizontal rules 1`] = `
Array [
  <p>
    Foo
  </p>,
  <hr />,
  <p>
    Bar
  </p>,
]
`;

exports[`should handle html blocks 1`] = `
Array [
  <p>
    This is a regular paragraph.
  </p>,
  <div
    dangerouslySetInnerHTML={
      Object {
        "__html": "<table>
    <tr>
        <td>Foo</td>
    </tr>
</table>",
      }
    }
  />,
  <p>
    This is another regular paragraph.
  </p>,
]
`;

exports[`should handle html blocks with HTML parser plugin 1`] = `
Array [
  <p>
    This is a regular paragraph.
  </p>,
  <table>
    
    
    <tr>
      
        
      <td>
        Foo
      </td>
      
    
    </tr>
    

  </table>,
  <p>
    This is another regular paragraph.
  </p>,
]
`;

exports[`should handle image references with custom uri transformer 1`] = `
<p>
  This is 
  <img
    alt="The Waffle Ninja"
    src="https://some.host/img.jpg"
  />
  .
</p>
`;

exports[`should handle images with custom uri transformer 1`] = `
<p>
  This is 
  <img
    alt="an image"
    src="/ninja.jpg"
  />
  .
</p>
`;

exports[`should handle images with special characters in alternative text 1`] = `
<p>
  This is 
  <img
    alt="a ninja's image"
    src="/ninja.png"
  />
  .
</p>
`;

exports[`should handle images with title attribute 1`] = `
<p>
  This is 
  <img
    alt="an image"
    src="/ninja.png"
    title="foo bar"
  />
  .
</p>
`;

exports[`should handle images without title attribute 1`] = `
<p>
  This is 
  <img
    alt="an image"
    src="/ninja.png"
  />
  .
</p>
`;

exports[`should handle inline html with escapeHtml option enabled 1`] = `
<p>
  I am having 
  &lt;strong&gt;
  so
  &lt;/strong&gt;
   much fun
</p>
`;

exports[`should handle invalid HTML with HTML parser plugin 1`] = `
<p>
  I am having 
  <div />
   so much
   fun
</p>
`;

exports[`should handle links with custom uri transformer 1`] = `
<p>
  This is 
  <a
    href="//espen.codes/"
  >
    a link
  </a>
   to Espen.Codes.
</p>
`;

exports[`should handle links with title attribute 1`] = `
<p>
  This is 
  <a
    href="https://espen.codes/"
    title="some title"
  >
    a link
  </a>
   to Espen.Codes.
</p>
`;

exports[`should handle links with uppercase protocol 1`] = `
<p>
  This is 
  <a
    href="HTTPS://ESPEN.CODES/"
  >
    a link
  </a>
   to Espen.Codes.
</p>
`;

exports[`should handle links without title attribute 1`] = `
<p>
  This is 
  <a
    href="https://espen.codes/"
  >
    a link
  </a>
   to Espen.Codes.
</p>
`;

exports[`should handle loose, unordered lists 1`] = `
<ul>
  <li>
    <p>
      foo
    </p>
  </li>
  <li>
    <p>
      bar
    </p>
  </li>
</ul>
`;

exports[`should handle loose, unordered lists with sublists 1`] = `
<ul>
  <li>
    <p>
      foo
    </p>
    <ul>
      <li>
        bar
      </li>
    </ul>
  </li>
</ul>
`;

exports[`should handle multiline paragraphs properly (softbreak, paragraphs) 1`] = `
<p>
  React is awesome
And so is markdown
  <br />
  Combining = epic
</p>
`;

exports[`should handle multiple paragraphs properly 1`] = `
Array [
  <p>
    React is awesome
And so is markdown
  </p>,
  <p>
    Combining = epic
  </p>,
]
`;

exports[`should handle nested blockquotes 1`] = `
<blockquote>
  <blockquote>
    <p>
      Lots of ex-Mootoolers on the React team
    </p>
  </blockquote>
  <p>
    Totally didn't know that.
  </p>
  <blockquote>
    <p>
      There's a reason why it turned out so awesome
    </p>
  </blockquote>
  <p>
    Haha I guess you're right!
  </p>
</blockquote>
`;

exports[`should handle ordered lists 1`] = `
<ol>
  <li>
    Ordered
  </li>
  <li>
    Lists
  </li>
  <li>
    Are cool
  </li>
</ol>
`;

exports[`should handle ordered lists with a start index 1`] = `
<ol
  start="7"
>
  <li>
    Ordered
  </li>
  <li>
    Lists
  </li>
  <li>
    Are cool
  </li>
</ol>
`;

exports[`should handle tight, unordered lists 1`] = `
<ul>
  <li>
    Unordered
  </li>
  <li>
    Lists
  </li>
  <li>
    Are cool
  </li>
</ul>
`;

exports[`should handle tight, unordered lists with sublists 1`] = `
<ul>
  <li>
    Unordered
    <ul>
      <li>
        Lists
        <ul>
          <li>
            Are cool
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
`;

exports[`should only use first language definition on code blocks 1`] = `
<pre>
  <code
    className="language-js"
  >
    var foo = require('bar');
foo();
  </code>
</pre>
`;

exports[`should pass depth, index and ordered props to list/listItem 1`] = `
<ul>
  <li>
    <p>
      foo
    </p>
    <ol
      start="2"
    >
      <li>
        bar
      </li>
      <li>
        baz
      </li>
    </ol>
  </li>
  <li>
    <p>
      root
    </p>
  </li>
</ul>
`;

exports[`should pass index of a node under its parent to non-tag renderers if includeNodeIndex option is enabled 1`] = `
Object {
  "children": Array [
    <TextRenderer
      index={0}
      node={
        Object {
          "position": Position {
            "end": Object {
              "column": 4,
              "line": 1,
              "offset": 3,
            },
            "indent": Array [],
            "start": Object {
              "column": 1,
              "line": 1,
              "offset": 0,
            },
          },
          "type": "text",
          "value": "Foo",
        }
      }
      nodeKey="text-1-1"
      parentChildCount={1}
      value="Foo"
    >
      Foo
    </TextRenderer>,
  ],
  "index": 0,
  "parentChildCount": 3,
}
`;

exports[`should pass index of a node under its parent to non-tag renderers if includeNodeIndex option is enabled 2`] = `
Object {
  "children": Array [
    <TextRenderer
      index={0}
      node={
        Object {
          "position": Position {
            "end": Object {
              "column": 4,
              "line": 3,
              "offset": 8,
            },
            "indent": Array [],
            "start": Object {
              "column": 1,
              "line": 3,
              "offset": 5,
            },
          },
          "type": "text",
          "value": "Bar",
        }
      }
      nodeKey="text-3-1"
      parentChildCount={1}
      value="Bar"
    >
      Bar
    </TextRenderer>,
  ],
  "index": 1,
  "parentChildCount": 3,
}
`;

exports[`should pass index of a node under its parent to non-tag renderers if includeNodeIndex option is enabled 3`] = `
Object {
  "children": Array [
    <TextRenderer
      index={0}
      node={
        Object {
          "position": Position {
            "end": Object {
              "column": 4,
              "line": 5,
              "offset": 13,
            },
            "indent": Array [],
            "start": Object {
              "column": 1,
              "line": 5,
              "offset": 10,
            },
          },
          "type": "text",
          "value": "Baz",
        }
      }
      nodeKey="text-5-1"
      parentChildCount={1}
      value="Baz"
    >
      Baz
    </TextRenderer>,
  ],
  "index": 2,
  "parentChildCount": 3,
}
`;

exports[`should pass index of a node under its parent to non-tag renderers if includeNodeIndex option is enabled 4`] = `
Array [
  <p>
    Foo
  </p>,
  <p>
    Bar
  </p>,
  <p>
    Baz
  </p>,
]
`;

exports[`should pass on raw source position to non-tag renderers if rawSourcePos option is enabled 1`] = `
Position {
  "end": Object {
    "column": 6,
    "line": 1,
    "offset": 5,
  },
  "indent": Array [],
  "start": Object {
    "column": 1,
    "line": 1,
    "offset": 0,
  },
}
`;

exports[`should pass on raw source position to non-tag renderers if rawSourcePos option is enabled 2`] = `
Array [
  <p>
    <em
      className="custom"
    >
      Foo
    </em>
  </p>,
  <hr />,
  <p>
    <strong>
      Bar
    </strong>
  </p>,
]
`;

exports[`should render empty link references 1`] = `"<p>Stuff were changed in <a href=\\"\\"></a>. Check out the changelog for reference.</p>"`;

exports[`should render image references 1`] = `"<p>Checkout out this ninja: <img src=\\"/assets/ninja.png\\" alt=\\"The Waffle Ninja\\"/>. Pretty neat, eh?</p>"`;

exports[`should render link references 1`] = `"<p>Stuff were changed in <a href=\\"https://github.com/rexxars/react-markdown/compare/v1.1.3...v1.1.4\\">1.1.4</a>. Check out the changelog for reference.</p>"`;

exports[`should render partial tables 1`] = `"<p>User is writing a table by hand</p><table><thead><tr><th>Test</th><th>Test</th></tr></thead></table>"`;

exports[`should render tables 1`] = `"<p>Languages are fun, right?</p><table><thead><tr><th style=\\"text-align:left\\">ID</th><th style=\\"text-align:center\\">English</th><th style=\\"text-align:right\\">Norwegian</th><th>Italian</th></tr></thead><tbody><tr><td style=\\"text-align:left\\">1</td><td style=\\"text-align:center\\">one</td><td style=\\"text-align:right\\">en</td><td>uno</td></tr><tr><td style=\\"text-align:left\\">2</td><td style=\\"text-align:center\\">two</td><td style=\\"text-align:right\\">to</td><td>due</td></tr><tr><td style=\\"text-align:left\\">3</td><td style=\\"text-align:center\\">three</td><td style=\\"text-align:right\\">tre</td><td>tre</td></tr></tbody></table>"`;

exports[`should sanititize language strings in code blocks 1`] = `
<pre>
  <code
    className="language-js"
  >
      woop
  </code>
</pre>
`;

exports[`should set source position attributes if sourcePos option is enabled 1`] = `
Array [
  <p
    data-sourcepos="1:1-1:4"
  >
    Foo
  </p>,
  <hr
    data-sourcepos="3:1-3:13"
  />,
  <p
    data-sourcepos="5:1-5:4"
  >
    Bar
  </p>,
]
`;

exports[`should skip html blocks if skipHtml prop is set (with HTML parser plugin) 1`] = `
Array [
  <p>
    This is a regular paragraph.
  </p>,
  <p>
    This is another regular paragraph.
  </p>,
]
`;

exports[`should skip html blocks if skipHtml prop is set 1`] = `
Array [
  <p>
    This is a regular paragraph.
  </p>,
  <p>
    This is another regular paragraph.
  </p>,
]
`;

exports[`should skip inline html with skipHtml option enabled 1`] = `
<p>
  I am having 
  so
   much fun
</p>
`;

exports[`should skip nodes that are defined as disallowed 1`] = `
Array [
  <h1>
    Header
  </h1>,
  <p>
    Paragraph
  </p>,
  <h2>
    New header
  </h2>,
  <ol />,
  <p>
    Foo
  </p>,
]
`;

exports[`should skip nodes that are not defined as allowed 1`] = `
Array [
  <p>
    Paragraph
  </p>,
  <ol>
    <li>
      List item
    </li>
    <li>
      List item 2
    </li>
  </ol>,
]
`;

exports[`should unwrap child nodes from disallowed nodes, if unwrapDisallowed option is enabled 1`] = `
<p>
  Espen 
  <del>
    initiated
  </del>
   had the initial commit
  , but has had several 
  contributors
</p>
`;

exports[`should use target attribute for links if specified 1`] = `
<p>
  This is 
  <a
    href="https://espen.codes/"
    target="_blank"
  >
    a link
  </a>
   to Espen.Codes.
</p>
`;

exports[`supports checkbox lists 1`] = `
Array [
  <ul>
    <li>
      <input
        checked={false}
        readOnly={true}
        type="checkbox"
      />
      Foo
    </li>
    <li>
      <input
        checked={true}
        readOnly={true}
        type="checkbox"
      />
      Bar
    </li>
  </ul>,
  <hr />,
  <ul>
    <li>
      Foo
    </li>
    <li>
      Bar
    </li>
  </ul>,
]
`;

exports[`uses passed classname for root component 1`] = `
<div
  className="md"
>
  <p>
    Test
  </p>
</div>
`;
